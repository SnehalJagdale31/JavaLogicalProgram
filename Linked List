public class ListNode {
	
	private int data;
	private ListNode next;
	
	
	public int getData() {
		return data;
	}
	public void setData(int data) {
		this.data = data;
	}
	public ListNode getNext() {
		return next;
	}
	public void setNext(ListNode next) {
		this.next = next;
	}
	

}


public class LinkedList {
	
	private ListNode head;
	
	
	public boolean hasLoop() {
		ListNode slowPtr =head,fastPtr = head;
		while(slowPtr!=null && fastPtr!=null && fastPtr.getNext()!=null) {
			slowPtr =slowPtr.getNext();
			fastPtr = fastPtr.getNext().getNext();
			if(slowPtr == fastPtr) {
				return true;
			}
			
		}
		return false;
	}
	
	
	public void reverse() {
		ListNode prevNode = null,nextNode = null;
		while(head!=null) {
			nextNode = head.getNext();
			head.setNext(prevNode);
			prevNode =head;
			head = nextNode;

		}
		head = prevNode;
	}

  	public void create(int data) {
  		ListNode newNode = createNewNode(data);
  		
		if(head == null) {
  			head = newNode;
  		}else {
  			ListNode temp = head;
  			while(temp.getNext()!=null) {
  				temp= temp.getNext();
  				
  			}
  			temp.setNext(newNode);
  		}
  	}

	private ListNode createNewNode(int data) {
		ListNode newNode = new ListNode();
  		newNode.setData(data);
  		newNode.setNext(null);
		return newNode;
	}
  	
  	public void insertAtBeginning(int data) {
  		ListNode newNode =createNewNode(data);
  		newNode.setNext(head);
  		head = newNode;
//  		System.out.println("inserted");
  	}
  	
  	public void insertAtTheEnd(int data) {
  		ListNode newNode = createNewNode(data);
  		
  		if(head == null) {
  			head = newNode;
  			
  		}else {
  			ListNode p = head;
  			while(p.getNext()!= null) {
  				p=p.getNext();
  			}
  			p.setNext(newNode);
  		}
  	}
  	
  	public void insertAfter(int position , int data) {
  		ListNode newNode = createNewNode(data);
  		
  		if(head == null) {
  			head = newNode;
  		}else if(position ==0) {
  			ListNode temp = newNode;
  			temp.setNext(head);
  			head = temp;
  		}else {
  			ListNode temp = head;
  			
  			for(int i =1;i<position;i++) {
  				temp = temp.getNext();
  			}
  			newNode.setNext(temp.getNext());
  			temp.setNext(newNode);
  		}
  	}
	
	public void removeFromBeginning() {
  		ListNode temp = head;
  		if(temp!= null) {
  			head =temp.getNext();
  			temp.setNext(null);
  					
  		}
  	}
	
	public void removeMatching(int data) {
  		ListNode p = head;
  		if(head.getData()==data) {
  			p=head;
  			head = p.getNext();
  			return;
  		}
  		ListNode q = head;
  		while(q.getNext() != null) {
  			if(q.getNext().getData == data) {
  				p=q.getNext();
  				q.setNext(p.getNext());
  				return
  			}
  			q = q.getNext();
  		}
  	}
	
	
//clearing the whole list
  	
/* 	public void clearList() {
  		head =null;
  	} */
	
	
	public void findNthNodeFromTheEnding(int n) {
  		ListNode nthNode = null, temp = head;
  		
  		if(head==null) {
  			System.out.println("List is Empty");
  			return;
  			
  		}
  		for(int i =1;i<n;i++) {
  			if(temp!= null) {
  				temp = temp.getNext();
  			}
  		}
  		
  		while(temp!=null) {
  			if(nthNode == null) {
  				nthNode = head;
  			}else {
  				nthNode = nthNode.getNext();
  			}
  			temp = temp.getNext();
  		}
  		if(nthNode!= null) {
  			System.out.println(nthNode.getData());
  		}else {
  			System.out.println("not enough");
  		}
  		
  	}
  	
  	public void Traverse() {
  		
  		ListNode currentNode = head;
  		while (currentNode!=null) {
			
  		System.out.println(currentNode.getData());
  		System.out.println(currentNode.getNext());
  		currentNode = currentNode.getNext();
  	}}
}




public class Test {

	public static void main(String[] args) {

		LinkedList lt = new LinkedList();
		lt.create(1);
		
		lt.create(2);
		
		lt.create(3);

		
		lt.reverse();
		
		lt.insertAtBeginning(4);
		lt.insertAtTheEnd(5);
		lt.insertAfter(2, 30);
		
		lt.removeFromBeginning();
		lt.removeMatching(2);
		
//		lt.clearList();
		
		lt.findNthNodeFromTheEnding(3);
		
		
		lt.Traverse();
		
	}

}
